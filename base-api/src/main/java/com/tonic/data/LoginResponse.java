package com.tonic.data;

import lombok.Getter;

@Getter
public enum LoginResponse {
    // Connection errors
    TIMEOUT(-3, "Connection timed out.", LoginResponseType.CONNECTION_ERROR),
    CONNECTION_ERROR(-2, "Error connecting to server.", LoginResponseType.CONNECTION_ERROR),
    NO_RESPONSE(-1, "No response from server.", LoginResponseType.CONNECTION_ERROR),

    // Special handling
    SPECIAL_3(3, "Incorrect username or password.", LoginResponseType.AUTHENTICATION),
    SPECIAL_4(4, null, LoginResponseType.BANNED), // Triggers ban type 0

    // Session issues
    ALREADY_LOGGED_IN(5, "Either your account is still logged in, or the last", LoginResponseType.SESSION_ISSUE),

    // Client updates
    CLIENT_OUT_OF_DATE_MOBILE(6, "RuneScape has been updated!", LoginResponseType.CLIENT_OUTDATED),
    CLIENT_OUT_OF_DATE(68, "RuneScape has been updated!", LoginResponseType.CLIENT_OUTDATED),

    // World restrictions
    WORLD_FULL(7, "This world is full.", LoginResponseType.WORLD_RESTRICTION),
    FREE_WORLD_ACCESS(17, "To access this free world, log into a", LoginResponseType.WORLD_RESTRICTION),
    CLOSED_BETA(19, "This world is running a", LoginResponseType.WORLD_RESTRICTION),
    WORLD_RESTRICTED(74, "Access to this world is", LoginResponseType.WORLD_RESTRICTION),

    // Server issues
    LOGIN_SERVER_OFFLINE(8, "Unable to connect.", LoginResponseType.SERVER_ISSUE),
    SERVER_UPDATING(14, "The server is being updated.", LoginResponseType.SERVER_ISSUE),
    SERVICE_UNAVAILABLE(27, "Service unavailable.", LoginResponseType.SERVER_ISSUE),

    // Rate limiting
    LOGIN_LIMIT_EXCEEDED(9, "Login limit exceeded.", LoginResponseType.RATE_LIMITED),
    TOO_MANY_ATTEMPTS(16, "Too many login attempts.", LoginResponseType.RATE_LIMITED),
    LOGIN_TIMEOUT(62, "Login attempt timed out.", LoginResponseType.RATE_LIMITED),

    // Authentication issues
    BAD_SESSION_ID(10, "Unable to connect.", LoginResponseType.AUTHENTICATION),
    PASSWORD_COMPROMISED(11, "We suspect someone knows your password.", LoginResponseType.AUTHENTICATION),
    AUTHENTICATOR_REQUIRED(56, "Enter the 6-digit code generated by your", LoginResponseType.AUTHENTICATION),
    AUTHENTICATOR_INCORRECT(57, "The code you entered was incorrect.", LoginResponseType.AUTHENTICATION),

    // Account restrictions
    MEMBERS_ONLY(12, "You need a members' account to use this world.", LoginResponseType.ACCOUNT_RESTRICTION),
    NO_DISPLAYNAME(31, "Your account must have a displayname set", LoginResponseType.ACCOUNT_RESTRICTION),
    ACCOUNT_INACCESSIBLE(37, "Your account is currently inaccessible.", LoginResponseType.ACCOUNT_RESTRICTION),
    VOTE_REQUIRED(38, "You need to vote to play!", LoginResponseType.ACCOUNT_RESTRICTION),
    DOB_REQUIRED(61, "Please enter your date of birth (DD/MM/YYYY)", LoginResponseType.ACCOUNT_RESTRICTION),
    DOB_UPDATE_PROBLEM(71, "There was a problem updating your DOB.", LoginResponseType.ACCOUNT_RESTRICTION),
    DOB_UNDER_REVIEW(73, "Your date of birth information is waiting", LoginResponseType.ACCOUNT_RESTRICTION),

    // Connection/protocol errors
    COULD_NOT_COMPLETE(13, "Could not complete login.", LoginResponseType.CONNECTION_ERROR),
    INVALID_LOGINSERVER(20, "Invalid loginserver requested.", LoginResponseType.CONNECTION_ERROR),
    MALFORMED_PACKET(22, "Malformed login packet.", LoginResponseType.CONNECTION_ERROR),
    NO_REPLY(23, "No reply from loginserver.", LoginResponseType.CONNECTION_ERROR),
    UNEXPECTED_RESPONSE(25, "Unexpected loginserver response.", LoginResponseType.CONNECTION_ERROR),

    // Banned
    SPECIAL_18(18, null, LoginResponseType.LOCKED), // Triggers ban type 1
    ADDRESS_BLOCKED(26, "This computers address has been blocked", LoginResponseType.BANNED),
    SPECIAL_32(32, null, LoginResponseType.BANNED), // Triggers ban type 2

    // Profile/account errors
    PROFILE_ERROR(24, "Error loading your profile.", LoginResponseType.MISC_ERROR),

    // Special handling
    SPECIAL_55(55, null, LoginResponseType.SPECIAL_HANDLING),
    SPECIAL_72(72, null, LoginResponseType.SPECIAL_HANDLING),

    // Session/login state
    SIGNED_OUT(63, "You were signed out.", LoginResponseType.SESSION_ISSUE),

    // Generic login failures
    LOGIN_FAILED_65(65, "Failed to login.", LoginResponseType.MISC_ERROR),
    LOGIN_FAILED_67(67, "Failed to login.", LoginResponseType.MISC_ERROR),

    // Default
    DEFAULT(-999, "Unexpected server response", LoginResponseType.MISC_ERROR);

    private final int index;
    private final String message;
    private final LoginResponseType type;

    LoginResponse(int index, String message, LoginResponseType type) {
        this.index = index;
        this.message = message;
        this.type = type;
    }

    /**
     * Get LoginResponse enum entry from login index
     * @param loginIndex the login index to lookup
     * @return the corresponding LoginResponse, or DEFAULT if not found
     */
    public static LoginResponse fromIndex(int loginIndex) {
        for (LoginResponse response : values()) {
            if (response.index == loginIndex) {
                return response;
            }
        }
        return DEFAULT;
    }

    public static LoginResponse fromString(String value, String value2) {
        String identifier = value == null || value.isEmpty() ? value2 : value;
        for (LoginResponse response : values()) {
            if (response.getMessage() != null && response.getMessage().equalsIgnoreCase(identifier)) {
                return response;
            }
        }
        System.err.println("Unknown login response string: " + value);
        return DEFAULT;
    }

    /**
     * Get response message directly from login index
     * @param loginIndex the login index to lookup
     * @return the response message, or the default message if not found
     */
    public static String getMessageFromIndex(int loginIndex) {
        LoginResponse response = fromIndex(loginIndex);
        return response.getMessage();
    }

    /**
     * Get response type directly from login index
     * @param loginIndex the login index to lookup
     * @return the response type
     */
    public static LoginResponseType getTypeFromIndex(int loginIndex) {
        LoginResponse response = fromIndex(loginIndex);
        return response.getType();
    }

    /**
     * Check if a response indicates the account is banned
     */
    public boolean isBanned() {
        return type == LoginResponseType.BANNED;
    }

    /**
     * Check if a response requires user action (update client, enter auth code, etc.)
     */
    public boolean requiresUserAction() {
        return type == LoginResponseType.CLIENT_OUTDATED ||
                type == LoginResponseType.AUTHENTICATION ||
                type == LoginResponseType.ACCOUNT_RESTRICTION;
    }
}